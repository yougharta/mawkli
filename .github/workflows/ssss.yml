name: "Build Images"
run-name: >
  Build images for ${{ github.event.pull_request.title }} ${{ github.event.pull_request._links.html.href }}
on:  # yamllint disable-line rule:truthy
  pull_request_target:
permissions:
  # all other permissions are set to none
  contents: read
  pull-requests: read
  packages: read
env:
  ANSWER: "yes"
  # You can override CONSTRAINTS_GITHUB_REPOSITORY by setting secret in your repo but by default the
  # Airflow one is going to be used
  CONSTRAINTS_GITHUB_REPOSITORY: >-
    ${{ secrets.CONSTRAINTS_GITHUB_REPOSITORY != '' &&
        secrets.CONSTRAINTS_GITHUB_REPOSITORY || 'yougharta/mawkli' }}
  # This token is WRITE one - pull_request_target type of events always have the WRITE token
  DB_RESET: "true"
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_USERNAME: ${{ github.actor }}
  IMAGE_TAG: "${{ github.event.pull_request.head.sha || github.sha }}"
  INCLUDE_SUCCESS_OUTPUTS: "true"
  USE_SUDO: "true"
  VERBOSE: "true"

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-info:
    timeout-minutes: 10
    name: "Build Info"
    # At build-info stage we do not yet have outputs so we need to hard-code the runs-on to public runners
    runs-on: ["ubuntu-22.04"]
    env:
      TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
    outputs:
      image-tag: ${{ github.event.pull_request.head.sha || github.sha }}
      python-versions: ${{ steps.selective-checks.outputs.python-versions }}
      python-versions-list-as-string: ${{ steps.selective-checks.outputs.python-versions-list-as-string }}
      default-python-version: ${{ steps.selective-checks.outputs.default-python-version }}
      upgrade-to-newer-dependencies: ${{ steps.selective-checks.outputs.upgrade-to-newer-dependencies }}
      run-tests: ${{ steps.selective-checks.outputs.run-tests }}
      run-kubernetes-tests: ${{ steps.selective-checks.outputs.run-kubernetes-tests }}
      ci-image-build: ${{ steps.selective-checks.outputs.ci-image-build }}
      prod-image-build: ${{ steps.selective-checks.outputs.prod-image-build }}
      docker-cache: ${{ steps.selective-checks.outputs.docker-cache }}
      default-branch: ${{ steps.selective-checks.outputs.default-branch }}
      constraints-branch: ${{ steps.selective-checks.outputs.default-constraints-branch }}
      runs-on-as-json-default: ${{ steps.selective-checks.outputs.runs-on-as-json-default }}
      runs-on-as-json-public: ${{ steps.selective-checks.outputs.runs-on-as-json-public }}
      runs-on-as-json-self-hosted: ${{ steps.selective-checks.outputs.runs-on-as-json-self-hosted }}
      is-self-hosted-runner: ${{ steps.selective-checks.outputs.is-self-hosted-runner }}
      is-committer-build: ${{ steps.selective-checks.outputs.is-committer-build }}
      is-airflow-runner: ${{ steps.selective-checks.outputs.is-airflow-runner }}
      is-amd-runner: ${{ steps.selective-checks.outputs.is-amd-runner }}
      is-arm-runner: ${{ steps.selective-checks.outputs.is-arm-runner }}
      is-vm-runner: ${{ steps.selective-checks.outputs.is-vm-runner }}
      is-k8s-runner: ${{ steps.selective-checks.outputs.is-k8s-runner }}
      chicken-egg-providers: ${{ steps.selective-checks.outputs.chicken-egg-providers }}
      target-commit-sha: "${{steps.discover-pr-merge-commit.outputs.target-commit-sha ||
          github.event.pull_request.head.sha ||
          github.sha
        }}"
    if: github.repository == 'yougharta/mawkli'
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: Discover PR merge commit
        id: discover-pr-merge-commit
        run: |
          # Sometimes target-commit-sha cannot be
          TARGET_COMMIT_SHA="$(gh api '${{ github.event.pull_request.url }}' --jq .merge_commit_sha)"
          if [[ ${TARGET_COMMIT_SHA} == "" ]]; then
            # Sometimes retrieving the merge commit SHA from PR fails. We retry it once. Otherwise we
            # fall-back to github.event.pull_request.head.sha
            echo
            echo "Could not retrieve merge commit SHA from PR, waiting for 3 seconds and retrying."
            echo
            sleep 3
            TARGET_COMMIT_SHA="$(gh api '${{ github.event.pull_request.url }}' --jq .merge_commit_sha)"
            if [[ ${TARGET_COMMIT_SHA} == "" ]]; then
              echo
              echo "Could not retrieve merge commit SHA from PR, falling back to PR head SHA."
              echo
              TARGET_COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
            fi
          fi
          echo "TARGET_COMMIT_SHA=${TARGET_COMMIT_SHA}"
          echo "TARGET_COMMIT_SHA=${TARGET_COMMIT_SHA}" >> ${GITHUB_ENV}
          echo "target-commit-sha=${TARGET_COMMIT_SHA}" >> ${GITHUB_OUTPUT}
        if: github.event_name == 'pull_request_target'
      # The labels in the event aren't updated when re-triggering the job, So lets hit the API to get
      # up-to-date values
      - name: Get latest PR labels
        id: get-latest-pr-labels
        run: |
          echo -n "pull-request-labels=" >> ${GITHUB_OUTPUT}
          gh api graphql --paginate -F node_id=${{github.event.pull_request.node_id}} -f query='
            query($node_id: ID!, $endCursor: String) {
              node(id:$node_id) {
                ... on PullRequest {
                  labels(first: 100, after: $endCursor) {
                    nodes { name }
                    pageInfo { hasNextPage endCursor }
                  }
                }
              }
            }' --jq '.data.node.labels.nodes[]' | jq --slurp -c '[.[].name]' >> ${GITHUB_OUTPUT}
        if: github.event_name == 'pull_request_target'
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_COMMIT_SHA }}
          persist-credentials: false
          fetch-depth: 2
      ####################################################################################################
      #  WE ONLY DO THAT CHECKOUT ABOVE TO RETRIEVE THE TARGET COMMIT AND IT'S PARENT. DO NOT RUN ANY CODE
      #  RIGHT AFTER THAT AS WE ARE GOING TO RESTORE THE TARGET BRANCH CODE IN THE NEXT STEP.
      ####################################################################################################
      - name: Checkout target branch to use ci/scripts and breeze from there.
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          persist-credentials: false
      ####################################################################################################
      #  HERE EVERYTHING IS PERFECTLY SAFE TO RUN. AT THIS POINT WE HAVE THE TARGET BRANCH CHECKED OUT
      #  AND WE CAN RUN ANY CODE FROM IT. WE CAN RUN BREEZE COMMANDS, WE CAN RUN SCRIPTS, WE CAN RUN
      #  COMPOSITE ACTIONS. WE CAN RUN ANYTHING THAT IS IN THE TARGET BRANCH AND THERE IS NO RISK THAT
      #  CODE WILL BE RUN FROM THE PR.
      ####################################################################################################
      - name: "Cleanup docker"
        run: ./scripts/ci/cleanup_docker.sh
  
